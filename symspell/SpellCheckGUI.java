/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package symspell;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
/**
 *
 * @author hiteash
 */
public class SpellCheckGUI extends javax.swing.JFrame {

    
    SymSpellHash sp;
    SpellingPeterNorving spPn;
    
    /**
     * Creates new form SpellCheckGUI
     */
    public SpellCheckGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enteredWord = new javax.swing.JTextField();
        symSpellButton = new javax.swing.JButton();
        PeterNorvingButton = new javax.swing.JButton();
        FaroosButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        enteredWord.setToolTipText("Just a single word please!");
        enteredWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enteredWordActionPerformed(evt);
            }
        });

        symSpellButton.setText("SymSpell");
        symSpellButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                symSpellButtonActionPerformed(evt);
            }
        });

        PeterNorvingButton.setText("Peter Norving");
        PeterNorvingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PeterNorvingButtonActionPerformed(evt);
            }
        });

        FaroosButton.setText("Faroos");
        FaroosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FaroosButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("          Enter Word Here");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(symSpellButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(PeterNorvingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(FaroosButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(220, 220, 220)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(enteredWord, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(102, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(enteredWord, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(symSpellButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PeterNorvingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FaroosButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(217, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enteredWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enteredWordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enteredWordActionPerformed

    public void createFarooDict() {
		sp.CreateDictionary("C:\\WorkSpaceJava\\SymSpell\\src\\dictionary\\dict.txt","");
	}
    
    private void symSpellButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_symSpellButtonActionPerformed
        
        System.out.println("symspell.SpellCheckGUI.symSpellButtonActionPerformed()");
        
        String word = enteredWord.getText();
        String display = null; 
        System.out.println("Entered Word: "+word);
        sp.CreateDictionary("C:\\WorkSpaceJava\\SymSpell\\src\\dictionary\\dict.txt","");
        
        long startTime = System.currentTimeMillis();
        display = sp.Correct(word, ""); 
        //sp.Correct(word, ""); 
        
        long endTime = System.currentTimeMillis();
        System.out.println("in Time:  " + (endTime-startTime)+"ms ");
        int retrieveTime = (int) (endTime-startTime);
        JOptionPane.showMessageDialog(null,
                                "Correct Word :"+display+"\n Retrieved in Time :"+retrieveTime+"ms ",
                                "Message",
                                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_symSpellButtonActionPerformed

    private void PeterNorvingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PeterNorvingButtonActionPerformed
        // TODO add your handling code here:
        SpellingPeterNorving spPn = null;
        String word = enteredWord.getText();
        String display = null; 
        System.out.println("Entered Word: "+word);
        long startTime = System.currentTimeMillis();

        try {
            spPn = new SpellingPeterNorving("C:\\WorkSpaceJava\\SymSpell\\src\\dictionary\\dict.txt");
        } catch (IOException ex) {
            System.err.println("Error while reading Corpus");
        }
        display = spPn.correct(word);
        
        long endTime = System.currentTimeMillis();
        int retrieveTime = (int) (endTime-startTime);
       JOptionPane.showMessageDialog(null,
                                "Correct Word :"+display+"\n Retrieved in Time :"+retrieveTime+"ms ",
                                "Message",
                                JOptionPane.INFORMATION_MESSAGE);
        
      /*  BkTree<String> bkt = new BkTree<>(StringMetrics.HAMMING_DISTANCE, dataset.get(0));
    {
        dataset.subList(1, dataset.size()).forEach(bkt::add);
    } */
    
    
        /*sp.CreateDictionary("C:\\WorkSpaceJava\\SymSpell\\src\\dictionary\\big.txt","");
        
        long startTime = System.currentTimeMillis();
        display = sp.Correct(word, ""); 
        //sp.Correct(word, ""); 
        
        long endTime = System.currentTimeMillis();
        System.out.println("in Time:  " + (endTime-startTime*0.04)+"ms ");
        int retrieveTime = (int) (endTime-startTime*0.04);
        JOptionPane.showMessageDialog(null,
                                "Correct Word :"+display+"\n Retrieved in Time :"+retrieveTime+"ms ",
                                "Message",
                                JOptionPane.INFORMATION_MESSAGE);*/
    }//GEN-LAST:event_PeterNorvingButtonActionPerformed

    private void FaroosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FaroosButtonActionPerformed
        // TODO add your handling code here:
        //Retrieve entered word from GUI
        String word = enteredWord.getText();
        String display = null; 
        System.out.println("Entered Word: "+word);
        createFarooDict();
        long startTime = System.currentTimeMillis();
        display = sp.Correct(word, ""); 
        
        long endTime = System.currentTimeMillis();
        System.out.println("in Time:  " + (endTime-startTime)+"ms ");
        int retrieveTime = (int) (endTime-startTime);
        
        //Can change this too Jlabels if need to show on GUI
        JOptionPane.showMessageDialog(null,
                                "Correct Word :"+display+"\n Retrieved in Time :"+retrieveTime+"ms ",
                                "Message",
                                JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_FaroosButtonActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SpellCheckGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SpellCheckGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SpellCheckGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SpellCheckGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SpellCheckGUI().setVisible(true);
            }
        });
    }

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FaroosButton;
    private javax.swing.JButton PeterNorvingButton;
    private javax.swing.JTextField enteredWord;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton symSpellButton;
    // End of variables declaration//GEN-END:variables
}
